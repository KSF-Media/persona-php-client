<?php
/**
 * Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  PersonaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Persona
 *
 * KSF Media unified login service
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PersonaClient\Model;

use \ArrayAccess;
use \PersonaClient\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @package  PersonaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Payment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invno' => 'int',
        'date' => '\DateTime',
        'due_date' => '\DateTime',
        'expenses' => 'double',
        'interest' => 'double',
        'vat' => 'double',
        'amount' => 'double',
        'open_amount' => 'double',
        'type' => 'string',
        'state' => 'string',
        'disc_percent' => 'double',
        'disc_amount' => 'double',
        'reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'invno' => null,
        'date' => 'date',
        'due_date' => 'date',
        'expenses' => 'double',
        'interest' => 'double',
        'vat' => 'double',
        'amount' => 'double',
        'open_amount' => 'double',
        'type' => null,
        'state' => null,
        'disc_percent' => 'double',
        'disc_amount' => 'double',
        'reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invno' => 'invno',
        'date' => 'date',
        'due_date' => 'dueDate',
        'expenses' => 'expenses',
        'interest' => 'interest',
        'vat' => 'vat',
        'amount' => 'amount',
        'open_amount' => 'openAmount',
        'type' => 'type',
        'state' => 'state',
        'disc_percent' => 'discPercent',
        'disc_amount' => 'discAmount',
        'reference' => 'reference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invno' => 'setInvno',
        'date' => 'setDate',
        'due_date' => 'setDueDate',
        'expenses' => 'setExpenses',
        'interest' => 'setInterest',
        'vat' => 'setVat',
        'amount' => 'setAmount',
        'open_amount' => 'setOpenAmount',
        'type' => 'setType',
        'state' => 'setState',
        'disc_percent' => 'setDiscPercent',
        'disc_amount' => 'setDiscAmount',
        'reference' => 'setReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invno' => 'getInvno',
        'date' => 'getDate',
        'due_date' => 'getDueDate',
        'expenses' => 'getExpenses',
        'interest' => 'getInterest',
        'vat' => 'getVat',
        'amount' => 'getAmount',
        'open_amount' => 'getOpenAmount',
        'type' => 'getType',
        'state' => 'getState',
        'disc_percent' => 'getDiscPercent',
        'disc_amount' => 'getDiscAmount',
        'reference' => 'getReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_NORMAL_STATE = 'NormalState';
    const TYPE_DIRECT_DEBIT = 'DirectDebit';
    const TYPE_REMINDER1 = 'Reminder1';
    const TYPE_REMINDER2 = 'Reminder2';
    const TYPE_RESERVED_PAYMENT_TYPE1 = 'ReservedPaymentType1';
    const TYPE_NONPAYMENT = 'Nonpayment';
    const TYPE_RESERVED_PAYMENT_TYPE2 = 'ReservedPaymentType2';
    const TYPE_REIMBURSEMENT = 'Reimbursement';
    const STATE_PAYMENT_OPEN = 'PaymentOpen';
    const STATE_PARTIALLY_PAID = 'PartiallyPaid';
    const STATE_PAID = 'Paid';
    const STATE_REMINDED = 'Reminded';
    const STATE_FORECLOSURE = 'Foreclosure';
    const STATE_RESERVED_PAYMENT_STATE = 'ReservedPaymentState';
    const STATE_REIMBURSED = 'Reimbursed';
    const STATE_CREDIT_LOSS = 'CreditLoss';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NORMAL_STATE,
            self::TYPE_DIRECT_DEBIT,
            self::TYPE_REMINDER1,
            self::TYPE_REMINDER2,
            self::TYPE_RESERVED_PAYMENT_TYPE1,
            self::TYPE_NONPAYMENT,
            self::TYPE_RESERVED_PAYMENT_TYPE2,
            self::TYPE_REIMBURSEMENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_PAYMENT_OPEN,
            self::STATE_PARTIALLY_PAID,
            self::STATE_PAID,
            self::STATE_REMINDED,
            self::STATE_FORECLOSURE,
            self::STATE_RESERVED_PAYMENT_STATE,
            self::STATE_REIMBURSED,
            self::STATE_CREDIT_LOSS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invno'] = isset($data['invno']) ? $data['invno'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['expenses'] = isset($data['expenses']) ? $data['expenses'] : null;
        $this->container['interest'] = isset($data['interest']) ? $data['interest'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['open_amount'] = isset($data['open_amount']) ? $data['open_amount'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['disc_percent'] = isset($data['disc_percent']) ? $data['disc_percent'] : null;
        $this->container['disc_amount'] = isset($data['disc_amount']) ? $data['disc_amount'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['invno'] === null) {
            $invalidProperties[] = "'invno' can't be null";
        }
        if (($this->container['invno'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'invno', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['invno'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'invno', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['expenses'] === null) {
            $invalidProperties[] = "'expenses' can't be null";
        }
        if ($this->container['interest'] === null) {
            $invalidProperties[] = "'interest' can't be null";
        }
        if ($this->container['vat'] === null) {
            $invalidProperties[] = "'vat' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['open_amount'] === null) {
            $invalidProperties[] = "'open_amount' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invno
     *
     * @return int
     */
    public function getInvno()
    {
        return $this->container['invno'];
    }

    /**
     * Sets invno
     *
     * @param int $invno Payment invoice ID
     *
     * @return $this
     */
    public function setInvno($invno)
    {

        if (($invno > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $invno when calling Payment., must be smaller than or equal to 9223372036854775807.');
        }
        if (($invno < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $invno when calling Payment., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['invno'] = $invno;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets expenses
     *
     * @return double
     */
    public function getExpenses()
    {
        return $this->container['expenses'];
    }

    /**
     * Sets expenses
     *
     * @param double $expenses 
     *
     * @return $this
     */
    public function setExpenses($expenses)
    {
        $this->container['expenses'] = $expenses;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return double
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param double $interest 
     *
     * @return $this
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return double
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param double $vat 
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount 
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets open_amount
     *
     * @return double
     */
    public function getOpenAmount()
    {
        return $this->container['open_amount'];
    }

    /**
     * Sets open_amount
     *
     * @param double $open_amount 
     *
     * @return $this
     */
    public function setOpenAmount($open_amount)
    {
        $this->container['open_amount'] = $open_amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type 
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state 
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets disc_percent
     *
     * @return double|null
     */
    public function getDiscPercent()
    {
        return $this->container['disc_percent'];
    }

    /**
     * Sets disc_percent
     *
     * @param double|null $disc_percent 
     *
     * @return $this
     */
    public function setDiscPercent($disc_percent)
    {
        $this->container['disc_percent'] = $disc_percent;

        return $this;
    }

    /**
     * Gets disc_amount
     *
     * @return double|null
     */
    public function getDiscAmount()
    {
        return $this->container['disc_amount'];
    }

    /**
     * Sets disc_amount
     *
     * @param double|null $disc_amount 
     *
     * @return $this
     */
    public function setDiscAmount($disc_amount)
    {
        $this->container['disc_amount'] = $disc_amount;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference Reference number
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


