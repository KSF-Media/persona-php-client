<?php
/**
 * PackageCampaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  PersonaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Persona
 *
 * KSF Media unified login service
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PersonaClient\Model;

use \ArrayAccess;
use \PersonaClient\ObjectSerializer;

/**
 * PackageCampaign Class Doc Comment
 *
 * @category Class
 * @package  PersonaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PackageCampaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PackageCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'no' => 'int',
        'id' => 'string',
        'name' => 'string',
        'price_eur' => 'double',
        'length' => 'int',
        'length_unit' => 'string',
        'start_day' => '\DateTime',
        'end_day' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'no' => null,
        'id' => null,
        'name' => null,
        'price_eur' => 'double',
        'length' => null,
        'length_unit' => null,
        'start_day' => 'date',
        'end_day' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'no' => 'no',
        'id' => 'id',
        'name' => 'name',
        'price_eur' => 'priceEur',
        'length' => 'length',
        'length_unit' => 'lengthUnit',
        'start_day' => 'startDay',
        'end_day' => 'endDay'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'no' => 'setNo',
        'id' => 'setId',
        'name' => 'setName',
        'price_eur' => 'setPriceEur',
        'length' => 'setLength',
        'length_unit' => 'setLengthUnit',
        'start_day' => 'setStartDay',
        'end_day' => 'setEndDay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'no' => 'getNo',
        'id' => 'getId',
        'name' => 'getName',
        'price_eur' => 'getPriceEur',
        'length' => 'getLength',
        'length_unit' => 'getLengthUnit',
        'start_day' => 'getStartDay',
        'end_day' => 'getEndDay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const LENGTH_UNIT_DAY = 'Day';
    const LENGTH_UNIT_WEEK = 'Week';
    const LENGTH_UNIT_MONTH = 'Month';
    const LENGTH_UNIT_YEAR = 'Year';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLengthUnitAllowableValues()
    {
        return [
            self::LENGTH_UNIT_DAY,
            self::LENGTH_UNIT_WEEK,
            self::LENGTH_UNIT_MONTH,
            self::LENGTH_UNIT_YEAR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['no'] = isset($data['no']) ? $data['no'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['price_eur'] = isset($data['price_eur']) ? $data['price_eur'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['length_unit'] = isset($data['length_unit']) ? $data['length_unit'] : null;
        $this->container['start_day'] = isset($data['start_day']) ? $data['start_day'] : null;
        $this->container['end_day'] = isset($data['end_day']) ? $data['end_day'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['no'] === null) {
            $invalidProperties[] = "'no' can't be null";
        }
        if (($this->container['no'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'no', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['no'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'no', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['price_eur'] === null) {
            $invalidProperties[] = "'price_eur' can't be null";
        }
        if ($this->container['length'] === null) {
            $invalidProperties[] = "'length' can't be null";
        }
        if (($this->container['length'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'length', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['length'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'length', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['length_unit'] === null) {
            $invalidProperties[] = "'length_unit' can't be null";
        }
        $allowedValues = $this->getLengthUnitAllowableValues();
        if (!is_null($this->container['length_unit']) && !in_array($this->container['length_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'length_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets no
     *
     * @return int
     */
    public function getNo()
    {
        return $this->container['no'];
    }

    /**
     * Sets no
     *
     * @param int $no Campaign number
     *
     * @return $this
     */
    public function setNo($no)
    {

        if (($no > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $no when calling PackageCampaign., must be smaller than or equal to 9223372036854775807.');
        }
        if (($no < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $no when calling PackageCampaign., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['no'] = $no;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Campaign id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Campaign name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price_eur
     *
     * @return double
     */
    public function getPriceEur()
    {
        return $this->container['price_eur'];
    }

    /**
     * Sets price_eur
     *
     * @param double $price_eur Price of campaign in euros
     *
     * @return $this
     */
    public function setPriceEur($price_eur)
    {
        $this->container['price_eur'] = $price_eur;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length Length of campaign
     *
     * @return $this
     */
    public function setLength($length)
    {

        if (($length > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $length when calling PackageCampaign., must be smaller than or equal to 9223372036854775807.');
        }
        if (($length < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $length when calling PackageCampaign., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets length_unit
     *
     * @return string
     */
    public function getLengthUnit()
    {
        return $this->container['length_unit'];
    }

    /**
     * Sets length_unit
     *
     * @param string $length_unit length_unit
     *
     * @return $this
     */
    public function setLengthUnit($length_unit)
    {
        $allowedValues = $this->getLengthUnitAllowableValues();
        if (!in_array($length_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'length_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['length_unit'] = $length_unit;

        return $this;
    }

    /**
     * Gets start_day
     *
     * @return \DateTime|null
     */
    public function getStartDay()
    {
        return $this->container['start_day'];
    }

    /**
     * Sets start_day
     *
     * @param \DateTime|null $start_day start_day
     *
     * @return $this
     */
    public function setStartDay($start_day)
    {
        $this->container['start_day'] = $start_day;

        return $this;
    }

    /**
     * Gets end_day
     *
     * @return \DateTime|null
     */
    public function getEndDay()
    {
        return $this->container['end_day'];
    }

    /**
     * Sets end_day
     *
     * @param \DateTime|null $end_day end_day
     *
     * @return $this
     */
    public function setEndDay($end_day)
    {
        $this->container['end_day'] = $end_day;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


