<?php
/**
 * NewUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Persona
 *
 * KSF Media unified login service
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NewUser Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'new_user_first_name' => 'string',
        'new_user_last_name' => 'string',
        'new_user_email_address' => 'string',
        'new_user_password' => 'string',
        'new_user_confirm_password' => 'string',
        'new_user_street_address' => 'string',
        'new_user_zip_code' => 'string',
        'new_user_city' => 'string',
        'new_user_country' => 'string',
        'new_user_phone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'new_user_first_name' => null,
        'new_user_last_name' => null,
        'new_user_email_address' => null,
        'new_user_password' => null,
        'new_user_confirm_password' => null,
        'new_user_street_address' => null,
        'new_user_zip_code' => null,
        'new_user_city' => null,
        'new_user_country' => null,
        'new_user_phone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_user_first_name' => 'newUserFirstName',
        'new_user_last_name' => 'newUserLastName',
        'new_user_email_address' => 'newUserEmailAddress',
        'new_user_password' => 'newUserPassword',
        'new_user_confirm_password' => 'newUserConfirmPassword',
        'new_user_street_address' => 'newUserStreetAddress',
        'new_user_zip_code' => 'newUserZipCode',
        'new_user_city' => 'newUserCity',
        'new_user_country' => 'newUserCountry',
        'new_user_phone' => 'newUserPhone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_user_first_name' => 'setNewUserFirstName',
        'new_user_last_name' => 'setNewUserLastName',
        'new_user_email_address' => 'setNewUserEmailAddress',
        'new_user_password' => 'setNewUserPassword',
        'new_user_confirm_password' => 'setNewUserConfirmPassword',
        'new_user_street_address' => 'setNewUserStreetAddress',
        'new_user_zip_code' => 'setNewUserZipCode',
        'new_user_city' => 'setNewUserCity',
        'new_user_country' => 'setNewUserCountry',
        'new_user_phone' => 'setNewUserPhone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_user_first_name' => 'getNewUserFirstName',
        'new_user_last_name' => 'getNewUserLastName',
        'new_user_email_address' => 'getNewUserEmailAddress',
        'new_user_password' => 'getNewUserPassword',
        'new_user_confirm_password' => 'getNewUserConfirmPassword',
        'new_user_street_address' => 'getNewUserStreetAddress',
        'new_user_zip_code' => 'getNewUserZipCode',
        'new_user_city' => 'getNewUserCity',
        'new_user_country' => 'getNewUserCountry',
        'new_user_phone' => 'getNewUserPhone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['new_user_first_name'] = isset($data['new_user_first_name']) ? $data['new_user_first_name'] : null;
        $this->container['new_user_last_name'] = isset($data['new_user_last_name']) ? $data['new_user_last_name'] : null;
        $this->container['new_user_email_address'] = isset($data['new_user_email_address']) ? $data['new_user_email_address'] : null;
        $this->container['new_user_password'] = isset($data['new_user_password']) ? $data['new_user_password'] : null;
        $this->container['new_user_confirm_password'] = isset($data['new_user_confirm_password']) ? $data['new_user_confirm_password'] : null;
        $this->container['new_user_street_address'] = isset($data['new_user_street_address']) ? $data['new_user_street_address'] : null;
        $this->container['new_user_zip_code'] = isset($data['new_user_zip_code']) ? $data['new_user_zip_code'] : null;
        $this->container['new_user_city'] = isset($data['new_user_city']) ? $data['new_user_city'] : null;
        $this->container['new_user_country'] = isset($data['new_user_country']) ? $data['new_user_country'] : null;
        $this->container['new_user_phone'] = isset($data['new_user_phone']) ? $data['new_user_phone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['new_user_email_address'] === null) {
            $invalidProperties[] = "'new_user_email_address' can't be null";
        }
        if ($this->container['new_user_password'] === null) {
            $invalidProperties[] = "'new_user_password' can't be null";
        }
        if ($this->container['new_user_confirm_password'] === null) {
            $invalidProperties[] = "'new_user_confirm_password' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_user_first_name
     *
     * @return string|null
     */
    public function getNewUserFirstName()
    {
        return $this->container['new_user_first_name'];
    }

    /**
     * Sets new_user_first_name
     *
     * @param string|null $new_user_first_name new_user_first_name
     *
     * @return $this
     */
    public function setNewUserFirstName($new_user_first_name)
    {
        $this->container['new_user_first_name'] = $new_user_first_name;

        return $this;
    }

    /**
     * Gets new_user_last_name
     *
     * @return string|null
     */
    public function getNewUserLastName()
    {
        return $this->container['new_user_last_name'];
    }

    /**
     * Sets new_user_last_name
     *
     * @param string|null $new_user_last_name new_user_last_name
     *
     * @return $this
     */
    public function setNewUserLastName($new_user_last_name)
    {
        $this->container['new_user_last_name'] = $new_user_last_name;

        return $this;
    }

    /**
     * Gets new_user_email_address
     *
     * @return string
     */
    public function getNewUserEmailAddress()
    {
        return $this->container['new_user_email_address'];
    }

    /**
     * Sets new_user_email_address
     *
     * @param string $new_user_email_address new_user_email_address
     *
     * @return $this
     */
    public function setNewUserEmailAddress($new_user_email_address)
    {
        $this->container['new_user_email_address'] = $new_user_email_address;

        return $this;
    }

    /**
     * Gets new_user_password
     *
     * @return string
     */
    public function getNewUserPassword()
    {
        return $this->container['new_user_password'];
    }

    /**
     * Sets new_user_password
     *
     * @param string $new_user_password new_user_password
     *
     * @return $this
     */
    public function setNewUserPassword($new_user_password)
    {
        $this->container['new_user_password'] = $new_user_password;

        return $this;
    }

    /**
     * Gets new_user_confirm_password
     *
     * @return string
     */
    public function getNewUserConfirmPassword()
    {
        return $this->container['new_user_confirm_password'];
    }

    /**
     * Sets new_user_confirm_password
     *
     * @param string $new_user_confirm_password new_user_confirm_password
     *
     * @return $this
     */
    public function setNewUserConfirmPassword($new_user_confirm_password)
    {
        $this->container['new_user_confirm_password'] = $new_user_confirm_password;

        return $this;
    }

    /**
     * Gets new_user_street_address
     *
     * @return string|null
     */
    public function getNewUserStreetAddress()
    {
        return $this->container['new_user_street_address'];
    }

    /**
     * Sets new_user_street_address
     *
     * @param string|null $new_user_street_address new_user_street_address
     *
     * @return $this
     */
    public function setNewUserStreetAddress($new_user_street_address)
    {
        $this->container['new_user_street_address'] = $new_user_street_address;

        return $this;
    }

    /**
     * Gets new_user_zip_code
     *
     * @return string|null
     */
    public function getNewUserZipCode()
    {
        return $this->container['new_user_zip_code'];
    }

    /**
     * Sets new_user_zip_code
     *
     * @param string|null $new_user_zip_code new_user_zip_code
     *
     * @return $this
     */
    public function setNewUserZipCode($new_user_zip_code)
    {
        $this->container['new_user_zip_code'] = $new_user_zip_code;

        return $this;
    }

    /**
     * Gets new_user_city
     *
     * @return string|null
     */
    public function getNewUserCity()
    {
        return $this->container['new_user_city'];
    }

    /**
     * Sets new_user_city
     *
     * @param string|null $new_user_city new_user_city
     *
     * @return $this
     */
    public function setNewUserCity($new_user_city)
    {
        $this->container['new_user_city'] = $new_user_city;

        return $this;
    }

    /**
     * Gets new_user_country
     *
     * @return string|null
     */
    public function getNewUserCountry()
    {
        return $this->container['new_user_country'];
    }

    /**
     * Sets new_user_country
     *
     * @param string|null $new_user_country new_user_country
     *
     * @return $this
     */
    public function setNewUserCountry($new_user_country)
    {
        $this->container['new_user_country'] = $new_user_country;

        return $this;
    }

    /**
     * Gets new_user_phone
     *
     * @return string|null
     */
    public function getNewUserPhone()
    {
        return $this->container['new_user_phone'];
    }

    /**
     * Sets new_user_phone
     *
     * @param string|null $new_user_phone new_user_phone
     *
     * @return $this
     */
    public function setNewUserPhone($new_user_phone)
    {
        $this->container['new_user_phone'] = $new_user_phone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


