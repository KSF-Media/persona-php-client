<?php
/**
 * PausedSubscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Persona
 *
 * KSF Media unified login service
 *
 * OpenAPI spec version: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PausedSubscription Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PausedSubscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PausedSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'paused_subscription_subsno' => 'int',
        'paused_subscription_sleep_start_date' => '\DateTime',
        'paused_subscription_sleep_end_date' => '\DateTime',
        'paused_subscription_credit_type' => 'string',
        'paused_subscription_credit_amount' => 'int',
        'paused_subscription_sleep_type' => 'string',
        'paused_subscription_credited' => 'bool',
        'paused_subscription_credit_invno' => 'int',
        'paused_subscription_booking_date' => 'string',
        'paused_subscription_allow_webpaper' => 'bool',
        'paused_subscription_receive_type' => 'string',
        'paused_subscription_confirm_status' => 'string',
        'paused_subscription_stamp_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'paused_subscription_subsno' => null,
        'paused_subscription_sleep_start_date' => 'date',
        'paused_subscription_sleep_end_date' => 'date',
        'paused_subscription_credit_type' => null,
        'paused_subscription_credit_amount' => null,
        'paused_subscription_sleep_type' => null,
        'paused_subscription_credited' => null,
        'paused_subscription_credit_invno' => null,
        'paused_subscription_booking_date' => null,
        'paused_subscription_allow_webpaper' => null,
        'paused_subscription_receive_type' => null,
        'paused_subscription_confirm_status' => null,
        'paused_subscription_stamp_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'paused_subscription_subsno' => 'pausedSubscriptionSubsno',
        'paused_subscription_sleep_start_date' => 'pausedSubscriptionSleepStartDate',
        'paused_subscription_sleep_end_date' => 'pausedSubscriptionSleepEndDate',
        'paused_subscription_credit_type' => 'pausedSubscriptionCreditType',
        'paused_subscription_credit_amount' => 'pausedSubscriptionCreditAmount',
        'paused_subscription_sleep_type' => 'pausedSubscriptionSleepType',
        'paused_subscription_credited' => 'pausedSubscriptionCredited',
        'paused_subscription_credit_invno' => 'pausedSubscriptionCreditInvno',
        'paused_subscription_booking_date' => 'pausedSubscriptionBookingDate',
        'paused_subscription_allow_webpaper' => 'pausedSubscriptionAllowWebpaper',
        'paused_subscription_receive_type' => 'pausedSubscriptionReceiveType',
        'paused_subscription_confirm_status' => 'pausedSubscriptionConfirmStatus',
        'paused_subscription_stamp_user' => 'pausedSubscriptionStampUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'paused_subscription_subsno' => 'setPausedSubscriptionSubsno',
        'paused_subscription_sleep_start_date' => 'setPausedSubscriptionSleepStartDate',
        'paused_subscription_sleep_end_date' => 'setPausedSubscriptionSleepEndDate',
        'paused_subscription_credit_type' => 'setPausedSubscriptionCreditType',
        'paused_subscription_credit_amount' => 'setPausedSubscriptionCreditAmount',
        'paused_subscription_sleep_type' => 'setPausedSubscriptionSleepType',
        'paused_subscription_credited' => 'setPausedSubscriptionCredited',
        'paused_subscription_credit_invno' => 'setPausedSubscriptionCreditInvno',
        'paused_subscription_booking_date' => 'setPausedSubscriptionBookingDate',
        'paused_subscription_allow_webpaper' => 'setPausedSubscriptionAllowWebpaper',
        'paused_subscription_receive_type' => 'setPausedSubscriptionReceiveType',
        'paused_subscription_confirm_status' => 'setPausedSubscriptionConfirmStatus',
        'paused_subscription_stamp_user' => 'setPausedSubscriptionStampUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'paused_subscription_subsno' => 'getPausedSubscriptionSubsno',
        'paused_subscription_sleep_start_date' => 'getPausedSubscriptionSleepStartDate',
        'paused_subscription_sleep_end_date' => 'getPausedSubscriptionSleepEndDate',
        'paused_subscription_credit_type' => 'getPausedSubscriptionCreditType',
        'paused_subscription_credit_amount' => 'getPausedSubscriptionCreditAmount',
        'paused_subscription_sleep_type' => 'getPausedSubscriptionSleepType',
        'paused_subscription_credited' => 'getPausedSubscriptionCredited',
        'paused_subscription_credit_invno' => 'getPausedSubscriptionCreditInvno',
        'paused_subscription_booking_date' => 'getPausedSubscriptionBookingDate',
        'paused_subscription_allow_webpaper' => 'getPausedSubscriptionAllowWebpaper',
        'paused_subscription_receive_type' => 'getPausedSubscriptionReceiveType',
        'paused_subscription_confirm_status' => 'getPausedSubscriptionConfirmStatus',
        'paused_subscription_stamp_user' => 'getPausedSubscriptionStampUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['paused_subscription_subsno'] = isset($data['paused_subscription_subsno']) ? $data['paused_subscription_subsno'] : null;
        $this->container['paused_subscription_sleep_start_date'] = isset($data['paused_subscription_sleep_start_date']) ? $data['paused_subscription_sleep_start_date'] : null;
        $this->container['paused_subscription_sleep_end_date'] = isset($data['paused_subscription_sleep_end_date']) ? $data['paused_subscription_sleep_end_date'] : null;
        $this->container['paused_subscription_credit_type'] = isset($data['paused_subscription_credit_type']) ? $data['paused_subscription_credit_type'] : null;
        $this->container['paused_subscription_credit_amount'] = isset($data['paused_subscription_credit_amount']) ? $data['paused_subscription_credit_amount'] : null;
        $this->container['paused_subscription_sleep_type'] = isset($data['paused_subscription_sleep_type']) ? $data['paused_subscription_sleep_type'] : null;
        $this->container['paused_subscription_credited'] = isset($data['paused_subscription_credited']) ? $data['paused_subscription_credited'] : null;
        $this->container['paused_subscription_credit_invno'] = isset($data['paused_subscription_credit_invno']) ? $data['paused_subscription_credit_invno'] : null;
        $this->container['paused_subscription_booking_date'] = isset($data['paused_subscription_booking_date']) ? $data['paused_subscription_booking_date'] : null;
        $this->container['paused_subscription_allow_webpaper'] = isset($data['paused_subscription_allow_webpaper']) ? $data['paused_subscription_allow_webpaper'] : null;
        $this->container['paused_subscription_receive_type'] = isset($data['paused_subscription_receive_type']) ? $data['paused_subscription_receive_type'] : null;
        $this->container['paused_subscription_confirm_status'] = isset($data['paused_subscription_confirm_status']) ? $data['paused_subscription_confirm_status'] : null;
        $this->container['paused_subscription_stamp_user'] = isset($data['paused_subscription_stamp_user']) ? $data['paused_subscription_stamp_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['paused_subscription_subsno'] === null) {
            $invalidProperties[] = "'paused_subscription_subsno' can't be null";
        }
        if (($this->container['paused_subscription_subsno'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'paused_subscription_subsno', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['paused_subscription_subsno'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'paused_subscription_subsno', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['paused_subscription_sleep_start_date'] === null) {
            $invalidProperties[] = "'paused_subscription_sleep_start_date' can't be null";
        }
        if ($this->container['paused_subscription_sleep_end_date'] === null) {
            $invalidProperties[] = "'paused_subscription_sleep_end_date' can't be null";
        }
        if ($this->container['paused_subscription_credit_type'] === null) {
            $invalidProperties[] = "'paused_subscription_credit_type' can't be null";
        }
        if ($this->container['paused_subscription_credit_amount'] === null) {
            $invalidProperties[] = "'paused_subscription_credit_amount' can't be null";
        }
        if (($this->container['paused_subscription_credit_amount'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'paused_subscription_credit_amount', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['paused_subscription_credit_amount'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'paused_subscription_credit_amount', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['paused_subscription_sleep_type'] === null) {
            $invalidProperties[] = "'paused_subscription_sleep_type' can't be null";
        }
        if ($this->container['paused_subscription_credited'] === null) {
            $invalidProperties[] = "'paused_subscription_credited' can't be null";
        }
        if ($this->container['paused_subscription_credit_invno'] === null) {
            $invalidProperties[] = "'paused_subscription_credit_invno' can't be null";
        }
        if (($this->container['paused_subscription_credit_invno'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'paused_subscription_credit_invno', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['paused_subscription_credit_invno'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'paused_subscription_credit_invno', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['paused_subscription_booking_date'] === null) {
            $invalidProperties[] = "'paused_subscription_booking_date' can't be null";
        }
        if ($this->container['paused_subscription_allow_webpaper'] === null) {
            $invalidProperties[] = "'paused_subscription_allow_webpaper' can't be null";
        }
        if ($this->container['paused_subscription_receive_type'] === null) {
            $invalidProperties[] = "'paused_subscription_receive_type' can't be null";
        }
        if ($this->container['paused_subscription_confirm_status'] === null) {
            $invalidProperties[] = "'paused_subscription_confirm_status' can't be null";
        }
        if ($this->container['paused_subscription_stamp_user'] === null) {
            $invalidProperties[] = "'paused_subscription_stamp_user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets paused_subscription_subsno
     *
     * @return int
     */
    public function getPausedSubscriptionSubsno()
    {
        return $this->container['paused_subscription_subsno'];
    }

    /**
     * Sets paused_subscription_subsno
     *
     * @param int $paused_subscription_subsno paused_subscription_subsno
     *
     * @return $this
     */
    public function setPausedSubscriptionSubsno($paused_subscription_subsno)
    {

        if (($paused_subscription_subsno > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $paused_subscription_subsno when calling PausedSubscription., must be smaller than or equal to 9223372036854775807.');
        }
        if (($paused_subscription_subsno < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $paused_subscription_subsno when calling PausedSubscription., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['paused_subscription_subsno'] = $paused_subscription_subsno;

        return $this;
    }

    /**
     * Gets paused_subscription_sleep_start_date
     *
     * @return \DateTime
     */
    public function getPausedSubscriptionSleepStartDate()
    {
        return $this->container['paused_subscription_sleep_start_date'];
    }

    /**
     * Sets paused_subscription_sleep_start_date
     *
     * @param \DateTime $paused_subscription_sleep_start_date paused_subscription_sleep_start_date
     *
     * @return $this
     */
    public function setPausedSubscriptionSleepStartDate($paused_subscription_sleep_start_date)
    {
        $this->container['paused_subscription_sleep_start_date'] = $paused_subscription_sleep_start_date;

        return $this;
    }

    /**
     * Gets paused_subscription_sleep_end_date
     *
     * @return \DateTime
     */
    public function getPausedSubscriptionSleepEndDate()
    {
        return $this->container['paused_subscription_sleep_end_date'];
    }

    /**
     * Sets paused_subscription_sleep_end_date
     *
     * @param \DateTime $paused_subscription_sleep_end_date paused_subscription_sleep_end_date
     *
     * @return $this
     */
    public function setPausedSubscriptionSleepEndDate($paused_subscription_sleep_end_date)
    {
        $this->container['paused_subscription_sleep_end_date'] = $paused_subscription_sleep_end_date;

        return $this;
    }

    /**
     * Gets paused_subscription_credit_type
     *
     * @return string
     */
    public function getPausedSubscriptionCreditType()
    {
        return $this->container['paused_subscription_credit_type'];
    }

    /**
     * Sets paused_subscription_credit_type
     *
     * @param string $paused_subscription_credit_type paused_subscription_credit_type
     *
     * @return $this
     */
    public function setPausedSubscriptionCreditType($paused_subscription_credit_type)
    {
        $this->container['paused_subscription_credit_type'] = $paused_subscription_credit_type;

        return $this;
    }

    /**
     * Gets paused_subscription_credit_amount
     *
     * @return int
     */
    public function getPausedSubscriptionCreditAmount()
    {
        return $this->container['paused_subscription_credit_amount'];
    }

    /**
     * Sets paused_subscription_credit_amount
     *
     * @param int $paused_subscription_credit_amount paused_subscription_credit_amount
     *
     * @return $this
     */
    public function setPausedSubscriptionCreditAmount($paused_subscription_credit_amount)
    {

        if (($paused_subscription_credit_amount > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $paused_subscription_credit_amount when calling PausedSubscription., must be smaller than or equal to 9223372036854775807.');
        }
        if (($paused_subscription_credit_amount < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $paused_subscription_credit_amount when calling PausedSubscription., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['paused_subscription_credit_amount'] = $paused_subscription_credit_amount;

        return $this;
    }

    /**
     * Gets paused_subscription_sleep_type
     *
     * @return string
     */
    public function getPausedSubscriptionSleepType()
    {
        return $this->container['paused_subscription_sleep_type'];
    }

    /**
     * Sets paused_subscription_sleep_type
     *
     * @param string $paused_subscription_sleep_type paused_subscription_sleep_type
     *
     * @return $this
     */
    public function setPausedSubscriptionSleepType($paused_subscription_sleep_type)
    {
        $this->container['paused_subscription_sleep_type'] = $paused_subscription_sleep_type;

        return $this;
    }

    /**
     * Gets paused_subscription_credited
     *
     * @return bool
     */
    public function getPausedSubscriptionCredited()
    {
        return $this->container['paused_subscription_credited'];
    }

    /**
     * Sets paused_subscription_credited
     *
     * @param bool $paused_subscription_credited paused_subscription_credited
     *
     * @return $this
     */
    public function setPausedSubscriptionCredited($paused_subscription_credited)
    {
        $this->container['paused_subscription_credited'] = $paused_subscription_credited;

        return $this;
    }

    /**
     * Gets paused_subscription_credit_invno
     *
     * @return int
     */
    public function getPausedSubscriptionCreditInvno()
    {
        return $this->container['paused_subscription_credit_invno'];
    }

    /**
     * Sets paused_subscription_credit_invno
     *
     * @param int $paused_subscription_credit_invno paused_subscription_credit_invno
     *
     * @return $this
     */
    public function setPausedSubscriptionCreditInvno($paused_subscription_credit_invno)
    {

        if (($paused_subscription_credit_invno > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $paused_subscription_credit_invno when calling PausedSubscription., must be smaller than or equal to 9223372036854775807.');
        }
        if (($paused_subscription_credit_invno < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $paused_subscription_credit_invno when calling PausedSubscription., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['paused_subscription_credit_invno'] = $paused_subscription_credit_invno;

        return $this;
    }

    /**
     * Gets paused_subscription_booking_date
     *
     * @return string
     */
    public function getPausedSubscriptionBookingDate()
    {
        return $this->container['paused_subscription_booking_date'];
    }

    /**
     * Sets paused_subscription_booking_date
     *
     * @param string $paused_subscription_booking_date paused_subscription_booking_date
     *
     * @return $this
     */
    public function setPausedSubscriptionBookingDate($paused_subscription_booking_date)
    {
        $this->container['paused_subscription_booking_date'] = $paused_subscription_booking_date;

        return $this;
    }

    /**
     * Gets paused_subscription_allow_webpaper
     *
     * @return bool
     */
    public function getPausedSubscriptionAllowWebpaper()
    {
        return $this->container['paused_subscription_allow_webpaper'];
    }

    /**
     * Sets paused_subscription_allow_webpaper
     *
     * @param bool $paused_subscription_allow_webpaper paused_subscription_allow_webpaper
     *
     * @return $this
     */
    public function setPausedSubscriptionAllowWebpaper($paused_subscription_allow_webpaper)
    {
        $this->container['paused_subscription_allow_webpaper'] = $paused_subscription_allow_webpaper;

        return $this;
    }

    /**
     * Gets paused_subscription_receive_type
     *
     * @return string
     */
    public function getPausedSubscriptionReceiveType()
    {
        return $this->container['paused_subscription_receive_type'];
    }

    /**
     * Sets paused_subscription_receive_type
     *
     * @param string $paused_subscription_receive_type paused_subscription_receive_type
     *
     * @return $this
     */
    public function setPausedSubscriptionReceiveType($paused_subscription_receive_type)
    {
        $this->container['paused_subscription_receive_type'] = $paused_subscription_receive_type;

        return $this;
    }

    /**
     * Gets paused_subscription_confirm_status
     *
     * @return string
     */
    public function getPausedSubscriptionConfirmStatus()
    {
        return $this->container['paused_subscription_confirm_status'];
    }

    /**
     * Sets paused_subscription_confirm_status
     *
     * @param string $paused_subscription_confirm_status paused_subscription_confirm_status
     *
     * @return $this
     */
    public function setPausedSubscriptionConfirmStatus($paused_subscription_confirm_status)
    {
        $this->container['paused_subscription_confirm_status'] = $paused_subscription_confirm_status;

        return $this;
    }

    /**
     * Gets paused_subscription_stamp_user
     *
     * @return string
     */
    public function getPausedSubscriptionStampUser()
    {
        return $this->container['paused_subscription_stamp_user'];
    }

    /**
     * Sets paused_subscription_stamp_user
     *
     * @param string $paused_subscription_stamp_user paused_subscription_stamp_user
     *
     * @return $this
     */
    public function setPausedSubscriptionStampUser($paused_subscription_stamp_user)
    {
        $this->container['paused_subscription_stamp_user'] = $paused_subscription_stamp_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


