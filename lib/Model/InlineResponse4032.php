<?php
/**
 * InlineResponse4032
 *
 * PHP version 5
 *
 * @category Class
 * @package  PersonaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Persona
 *
 * KSF Media unified login service
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PersonaClient\Model;

use \ArrayAccess;
use \PersonaClient\ObjectSerializer;

/**
 * InlineResponse4032 Class Doc Comment
 *
 * @category Class
 * @package  PersonaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse4032 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_403_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email_address_in_use' => '\PersonaClient\Model\InlineResponse4032EmailAddressInUse',
        'http_code' => 'int',
        'oauth_failed' => '\PersonaClient\Model\InlineResponse4032OauthFailed',
        'http_status' => 'string',
        'email_not_authorized' => '\PersonaClient\Model\InlineResponse4032EmailNotAuthorized'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'email_address_in_use' => null,
        'http_code' => null,
        'oauth_failed' => null,
        'http_status' => null,
        'email_not_authorized' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email_address_in_use' => 'email_address_in_use',
        'http_code' => 'http_code',
        'oauth_failed' => 'oauth_failed',
        'http_status' => 'http_status',
        'email_not_authorized' => 'email_not_authorized'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email_address_in_use' => 'setEmailAddressInUse',
        'http_code' => 'setHttpCode',
        'oauth_failed' => 'setOauthFailed',
        'http_status' => 'setHttpStatus',
        'email_not_authorized' => 'setEmailNotAuthorized'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email_address_in_use' => 'getEmailAddressInUse',
        'http_code' => 'getHttpCode',
        'oauth_failed' => 'getOauthFailed',
        'http_status' => 'getHttpStatus',
        'email_not_authorized' => 'getEmailNotAuthorized'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const HTTP_STATUS_FORBIDDEN = 'Forbidden';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpStatusAllowableValues()
    {
        return [
            self::HTTP_STATUS_FORBIDDEN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_address_in_use'] = isset($data['email_address_in_use']) ? $data['email_address_in_use'] : null;
        $this->container['http_code'] = isset($data['http_code']) ? $data['http_code'] : null;
        $this->container['oauth_failed'] = isset($data['oauth_failed']) ? $data['oauth_failed'] : null;
        $this->container['http_status'] = isset($data['http_status']) ? $data['http_status'] : null;
        $this->container['email_not_authorized'] = isset($data['email_not_authorized']) ? $data['email_not_authorized'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHttpStatusAllowableValues();
        if (!is_null($this->container['http_status']) && !in_array($this->container['http_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'http_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email_address_in_use
     *
     * @return \PersonaClient\Model\InlineResponse4032EmailAddressInUse|null
     */
    public function getEmailAddressInUse()
    {
        return $this->container['email_address_in_use'];
    }

    /**
     * Sets email_address_in_use
     *
     * @param \PersonaClient\Model\InlineResponse4032EmailAddressInUse|null $email_address_in_use email_address_in_use
     *
     * @return $this
     */
    public function setEmailAddressInUse($email_address_in_use)
    {
        $this->container['email_address_in_use'] = $email_address_in_use;

        return $this;
    }

    /**
     * Gets http_code
     *
     * @return int|null
     */
    public function getHttpCode()
    {
        return $this->container['http_code'];
    }

    /**
     * Sets http_code
     *
     * @param int|null $http_code http_code
     *
     * @return $this
     */
    public function setHttpCode($http_code)
    {
        $this->container['http_code'] = $http_code;

        return $this;
    }

    /**
     * Gets oauth_failed
     *
     * @return \PersonaClient\Model\InlineResponse4032OauthFailed|null
     */
    public function getOauthFailed()
    {
        return $this->container['oauth_failed'];
    }

    /**
     * Sets oauth_failed
     *
     * @param \PersonaClient\Model\InlineResponse4032OauthFailed|null $oauth_failed oauth_failed
     *
     * @return $this
     */
    public function setOauthFailed($oauth_failed)
    {
        $this->container['oauth_failed'] = $oauth_failed;

        return $this;
    }

    /**
     * Gets http_status
     *
     * @return string|null
     */
    public function getHttpStatus()
    {
        return $this->container['http_status'];
    }

    /**
     * Sets http_status
     *
     * @param string|null $http_status http_status
     *
     * @return $this
     */
    public function setHttpStatus($http_status)
    {
        $allowedValues = $this->getHttpStatusAllowableValues();
        if (!is_null($http_status) && !in_array($http_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'http_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['http_status'] = $http_status;

        return $this;
    }

    /**
     * Gets email_not_authorized
     *
     * @return \PersonaClient\Model\InlineResponse4032EmailNotAuthorized|null
     */
    public function getEmailNotAuthorized()
    {
        return $this->container['email_not_authorized'];
    }

    /**
     * Sets email_not_authorized
     *
     * @param \PersonaClient\Model\InlineResponse4032EmailNotAuthorized|null $email_not_authorized email_not_authorized
     *
     * @return $this
     */
    public function setEmailNotAuthorized($email_not_authorized)
    {
        $this->container['email_not_authorized'] = $email_not_authorized;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


